---
- name: setup Atomic host
  hosts: atomichosts

  vars_files:
    - vault.yml
    - vars.yml

  tasks:
    - name: upgrade
      shell: /usr/bin/atomic host upgrade
      register: upgradestatus
      changed_when: "'No upgrade available' not in upgradestatus.stdout"

    - name: restart machine
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
      when: "'No upgrade available' not in upgradestatus.stdout"

    - name: waiting for server to come back
      wait_for:
        host: "{{ inventory_hostname }}"
        state: started
        delay: 30
        timeout: 300
        port: 22
      delegate_to: localhost
      become: false
      when: "'No upgrade available' not in upgradestatus.stdout"

    - name: install packages
      shell: /usr/bin/rpm-ostree pkg-add tree git vim-enhanced docker-compose creates=/usr/bin/git
      register: installpkgs

    - name: restart machine again
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
      when: "installpkgs.changed"

    - name: waiting for server to come back again
      wait_for:
        host: "{{ inventory_hostname }}"
        state: started
        delay: 30
        timeout: 300
        port: 22
      delegate_to: localhost
      become: false
      when: "installpkgs.changed"

    - name: create certbot folder
      file:
        path: /var/certbot
        owner: root
        group: wheel
        mode: 0770
        state: directory
        setype: svirt_sandbox_file_t 

    - name: change ownership of /var/run/docker.sock
      file:
        path: /var/run/docker.sock
        owner: root
        group: wheel
        mode: 0660
        setype: container_var_run_t
      tags: [ docker ]

    - name: make rshared
      shell: /usr/bin/mount --make-rshared / warn=false 
      changed_when: false
      tags: [ docker ]

    - name: template out /etc/hosts
      template:
        src: templates/etc_hosts.j2
        dest: /etc/hosts
        mode: 0644
        owner: root
        group: root
      tags: [ hosts ]

    - name: template out tmux.conf
      template:
        src: templates/tmux.conf.j2
        dest: "~{{ item }}/.tmux.conf"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: 0644
      with_items:
        - root
        - goozbach

    - name: template out git config
      template:
        src: templates/gitconfig.j2
        dest: "~{{item}}/.gitconfig"
        owner: "{{item}}"
        group: "{{item}}"
        mode: 0644
      with_items:
        - root
        - goozbach

    - name: open related, established traffic
      iptables:
        chain: INPUT
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT
      tags: [ firewall ]

    - name: open new, ssh traffic
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: ssh
        ctstate: NEW
        jump: ACCEPT
      tags: [ firewall ]

    - name: open lo interface
      iptables:
        chain: INPUT
        in_interface: lo
        jump: ACCEPT
      tags: [ firewall ]

    - name: open docker0 interface
      iptables:
        chain: INPUT
        in_interface: docker0
        jump: ACCEPT
      tags: [ firewall ]

    - name: input drop
      iptables:
        chain: INPUT
        policy: DROP
      tags: [ firewall ]

    - name: create all docker volume folders
      file:
        path: "{{ item.path }}"
        owner: "{{ item.owner | default ('root') }}"
        group: "{{ item.group | default ('root') }}"
        mode: "{{ item.mode | default ('0775') }}"
        setype: "{{ item.type | default ('svirt_sandbox_file_t') }}"
        state: directory
      with_items: "{{ docker_volumes }}"
      tags: [ containers, docker, volumes, registry, certbot, frontend, gitlab, postgres, folders, database, perconda ]

    - name: create local-registry container
      docker_container:
        name: "local-registry"
        image: "registry:2"
        state: started
        volumes:
          - "/var/lib/local-registry:/var/lib/registry"
          - "/var/htaccess:/var/htaccess"
          - "/var/certbot:/etc/certbot:ro"
        ports:
          - "5000:5000"
        restart_policy: always
        env:
          REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: "/var/lib/registry"
          REGISTRY_AUTH: "htpasswd"
          REGISTRY_AUTH_HTPASSWD_REALM: "goozbach registry"
          REGISTRY_AUTH_HTPASSWD_PATH: "/var/htaccess/registry.htpasswd"
          REGISTRY_HTTP_TLS_CERTIFICATE: "/etc/certbot/live/rishi.goozbach.net/cert.pem"
          REGISTRY_HTTP_TLS_KEY: "/etc/certbot/live/rishi.goozbach.net/privkey.pem"
      tags: [ docker, containers, registry ]
 
    - name: create certbot-updater container
      docker_container:
        name: "certbot-updater"
        image: "rishi.goozbach.net:5000/certbot-updater:v1.0.2"
        volumes:
          - "/var/certbot/:/etc/letsencrypt"
          - "/var/certbot-well-known:/var/www/html/"
      tags: [ docker, containers, certbot ]

    - name: template postgres initdb file
      template:
        src: templates/gitlab.sql.j2
        dest: "/var/postgres/bootstrap/gitlab.sql"
        owner: root
        group: root
        mode: 0644
      tags: [ docker, containers, postgres, database ]

    - name: create percona container
      docker_container:
        name: "percona"
        image: "percona:latest"
        env:
          MYSQL_ROOT_PASSWORD: "{{ percona_passwords['root'] }}"
        volumes:
          - "/var/percona/bootstrap:/docker-entrypoint-initdb.d"
          - "/var/percona/data:/var/lib/mysql"
      tags: [ docker, containers, percona, database ]

    - name: create postgres container
      docker_container:
        name: "postgres"
        image: "postgres:alpine"
        env:
          POSTGRES_PASSWORD: "{{ postgres_passwords['postgres'] }}"
        volumes:
          - "/var/postgres/bootstrap:/docker-entrypoint-initdb.d"
          - "/var/postgres/data:/var/lib/postgresql/data"
      tags: [ docker, containers, postgres ]

    - name: create gitlab container
      docker_container:
        name: "gitlab"
        image: "gitlab/gitlab-ce:latest"
        ports:
          - "2222:22"
        links:
          - postgres
        volumes:
          - "/var/certbot/:/etc/letsencrypt"
          - "/var/gitlab/config/:/var/gitlab/config/"
          - "/var/gitlab/logs/:/var/gitlab/logs/"
          - "/var/gitlab/config/:/var/gitlab/config/"
        env:
          GITLAB_OMNIBUS_CONFIG: |
            nginx['ssl_certificate'] = '/etc/letsencrypt/live/rishi.goozbach.net/fullchain.pem'
            nginx['ssl_certificate_key'] = '/etc/letsencrypt/live/rishi.goozbach.net/privkey.pem'
            postgresql['enable'] = false
            gitlab_rails['db_adapter'] = 'postgresql'
            gitlab_rails['db_encoding'] = 'utf8'
            gitlab_rails['db_database'] = "gitlab"
            gitlab_rails['db_host'] = 'postgres'
            gitlab_rails['db_port'] = '5432'
            gitlab_rails['db_username'] = 'gitlab'
            gitlab_rails['db_password'] = "{{ postgres_passwords['gitlab'] }}"
            gitlab_rails['initial_root_password'] = "{{ gitlab_rootpass }}"

      tags: [ docker, containers, gitlab ]

    - name: create frontend container
      docker_container:
        name: "frontend"
        image: "nginx:alpine"
        ports:
          - "80:80"
          - "443:443"
        links:
          - gitlab
        volumes:
          - "/var/certbot/:/etc/letsencrypt"
          - "/var/frontend/config/nginx.conf:/etc/nginx/nginx.conf:ro"
          - "/var/frontend/config/conf.d/:/etc/nginx/conf.d/:ro"
          - "/var/frontend/config/pre.d/:/etc/nginx/pre.d/:ro"
          - "/var/frontend/config/inside.d/:/etc/nginx/inside.d/:ro"
          - "/var/frontend/html/:/usr/share/nginx/html/"
          - "/var/certbot-well-known/.well-known/:/usr/share/nginx/html/.well-known:ro"
      tags: [ docker, containers, frontend ]

